{"version":3,"sources":["components/EmployeeCard/index.js","components/FilterOptions/index.js","components/SortOptions/index.js","components/Wrapper/index.js","components/Title/index.js","API.js","App.js","index.js"],"names":["getGreeting","name","list","Math","floor","random","length","getCity","location","city","country","HyperLink","props","href","email","getEmail","getUserName","username","EmployeeCardMemo","className","alt","src","image","github","onClick","end","EmployeeCard","memo","prevProps","nextProps","toDel","FilterOptions","setEmployees","spec","value","setStateApp","nonFilteredEmps","filter","employee","filterByList","func","map","type","SortOptions","sortBy","compare","a","b","resolve","obj","split","reduce","prev","curr","sortEmployees","employees","sort","SortByList","desc","Wrapper","children","Title","idGenerator","API","getEmployee","axios","get","then","res","data","results","emp","id","getEmployees","n","regenEmployee","oldEmployeeId","employeeList","oldEmpIndex","findIndex","this","newEmployee","gender","splice","newEmp","App","state","delId","filteredBy","setState","first","last","picture","large","login","regenEmp","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8c7f398.chunk.js","sourcesContent":["import React from \"react\";\nimport { memo } from \"react\";\nimport \"./style.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst getGreeting = (name) => {\n  let list = [\n    `Hi, I'm ${name}. Goodday!`,\n    `Hey, my name is ${name}.`,\n    `How are you? I'm ${name}.`,\n    `I'm ${name}. Pleased to meet you!`\n  ]\n\n  return list[Math.floor(Math.random() * list.length)]\n}\n\n\nconst getCity = (location) => {\n  let list = [\n    `I'm from ${location.city}, ${location.country}.`,\n    `I'm located in ${location.city}, ${location.country}.`,\n    `I'm from ${location.country}, more specifically ${location.city}.`,\n    `I live in ${location.city}, ${location.country}.`\n  ]\n\n  return list[Math.floor(Math.random() * list.length)]\n}\n\nfunction HyperLink(props) {\n    return (\n    <a href={\"mailto:\" + props.email}>{props.email}</a>\n    )\n}\n\nconst getEmail = () => {\n  let list = [\n    `Contact me at `,\n    `My email address is `,\n    `Reach me at `,\n    `You can get in touch with me at `,\n    `Get a hold of me at `\n  ]\n\n  return list[Math.floor(Math.random() * list.length)]\n  }\n\nconst getUserName = (username) =>{\n  let list = [\n    'This is my github, ' + username + '.',\n    'My github is ' + username + '.',\n    'Look at my github, its ' + username + '.',\n    'See all my cool repos on github, I\\'m ' + username + '.'\n  ]\n\n  return list[Math.floor(Math.random() * list.length)]\n  \n  }\n\nconst EmployeeCardMemo = (props) => {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img className=\"img-thumbnail rounded-circle\" alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            { getGreeting(props.name) }\n          </li>\n          <li>\n           { getCity(props.location)}\n          </li>\n          <li>\n            { getUserName(props.github) }\n          </li>\n          <li>\n            { getEmail() }\n            <HyperLink email={props.email}> </HyperLink>\n          </li>\n        </ul>\n      </div>\n      <span className=\"remove\" onClick={props.end}>&#x21bb;</span>\n    </div>\n  );\n}\n\n// so only the chose employee regenerated on \"regenEmp\"\nexport const EmployeeCard = memo(EmployeeCardMemo,(prevProps, nextProps) => {\n  return prevProps.toDel === false\n})\n\nexport default EmployeeCard;\n","import React from \"react\";\nimport App from \"../../App\"\nimport \"./style.css\"\n\nconst FilterOptions = (props) => {\n\n\n// this sets the employee list to the filtered list\nconst setEmployees = (spec,value) => {\n    props.setStateApp(\"employees\", props.nonFilteredEmps.filter(\n        employee => employee[spec] === value\n      ))\n    props.setStateApp(\"filteredBy\", value)\n}\n\n// this sets the employee list back to the non-filtered list\nconst resetEmployees = () => {\n    props.setStateApp(\"employees\", props.nonFilteredEmps)\n    props.setStateApp(\"filteredBy\", \"none\")\n\n}\n\n// list containing options for filter and their corresponding funcitons\nconst filterByList = [\n        {\n            value: \"Show only women\", func: () => {\n              setEmployees(\"gender\",\"female\")\n            }\n        },\n        {\n            value: \"Show only men\", func: () => {\n\n              setEmployees(\"gender\",\"male\")\n            }\n        },\n        {\n            value: \"Reset\", func: () => {\n              resetEmployees()\n            }\n        },\n      ]\n    \n  return (\n    <>\n    <p className=\"text-center\">Filter By:</p>\n    <div className=\"options\">\n    {filterByList.map(filter => (\n            <label><input type=\"radio\" name=\"sortBy\" onClick={filter.func}></input>{filter.value}</label>\n        )\n    )}\n    </div>\n    </>);\n}\n\nexport default FilterOptions;\n","import React from \"react\";\nimport App from \"../../App\"\n\nconst SortOptions = (props) => {\n\n  // this has to be global b/c compare can only take two arguments\n  let sortBy = \"\"\n\n  const compare = (a,b) => {\n    a = resolve(sortBy,a)\n    b = resolve(sortBy,b)\n    if (a < b) return -1\n    else if (a > b) return 1\n    return 0\n  }\n\n  // thanks to Stack Overflow!\n  // resolves strings such as \"a.b.c\" to object properties\n  // ex1. resolve(\"a.b.c.d\",{a: {b: {c: {d : \"hello\"}}}}) => \"hello\"\n  // ex2. resolve(\"a.b.c\",{a: {b: {c: {d : \"hello\"}}}}) => \"{d: hello}\"\n  const resolve = (props, obj) => {\n    return props.split('.').reduce((prev, curr) => prev ? prev[curr] : null, obj)\n  }\n\n  const sortEmployees = () => {\n    props.setStateApp(\"employees\", props.employees.sort(compare))\n  }\n\n  const SortByList = [\n        // value will be the value or sortBy\n          {\n              desc: \"First name\", value: \"name.first\", func: () => {\n                sortEmployees()\n              }\n          },\n          {\n              desc: \"Last name\", value: \"name.last\", func: () => {\n                sortEmployees()\n              }\n          },\n          {\n            desc: \"City\", value: \"location.city\", func: () => {\n                sortEmployees()\n              }\n          },\n        ]\n    \n  return (\n    <>\n    <p className=\"text-center\">Sort By:</p>\n    <div className=\"options\">\n      \n    {SortByList.map(sort => (\n            <label><input type=\"radio\" name=\"gender\" onClick={()=>{sortBy=sort.value; sort.func()}}></input> {sort.desc}</label>\n        )\n    )}\n    </div>\n    </>);\n}\n\nexport default SortOptions;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import axios from \"axios\"\n\nlet idGenerator = 0;\n\nconst API = {\n\n    getEmployee() {\n        return axios.get('https://randomuser.me/api/')\n            .then(res => {\n            return res.data.results[0]\n            }).then(emp => {\n                emp.id = ++idGenerator\n                return emp\n            })\n    },\n\n    getEmployees(n = 10) {\n        return axios.get(\"https://randomuser.me/api/?results=\" + n)\n        .then(res => res.data.results\n        .map(employee => {\n            employee.id = ++idGenerator\n            return employee\n        })\n        )\n        .then(employees => employees)\n    },\n\n    regenEmployee(oldEmployeeId, employeeList, filter) {\n        let oldEmpIndex = employeeList.findIndex(employee =>\n            employee.id === oldEmployeeId \n        )\n        return this.getEmployee()\n        .then(\n            newEmployee => {\n                if (filter === \"none\" || newEmployee.gender === filter) {\n                    employeeList.splice(oldEmpIndex,1,newEmployee)\n                    return {list: employeeList, newEmp: newEmployee}\n                } else {\n                    return this.regenEmployee(oldEmployeeId, employeeList,filter)\n                }\n        })\n    }\n\n}\n\nexport default API","import React from 'react';\nimport EmployeeCard from './components/EmployeeCard';\nimport FilterOptions from './components/FilterOptions';\nimport SortOptions from \"./components/SortOptions\"\nimport Wrapper from './components/Wrapper';\nimport Title from './components/Title';\nimport API from './API';\nimport { render } from 'react-dom';\n\nclass App extends React.Component {\n  \n  state = {\n    employees: [],\n    nonFilteredEmps: [],\n    delId: 0,\n    filteredBy: \"none\"\n  };\n\n  componentDidMount() {\n    API.getEmployees()\n      .then(employeeList => {\n        this.setState({ employees: employeeList, nonFilteredEmps: employeeList })\n      });\n  }\n  \n  regenEmp(id, employees, filter = \"none\") {\n    API.regenEmployee(id, employees, filter)\n      .then(employeeList => {\n        this.setState({ employees: employeeList.list})\n    });\n  }\n\n  setStateApp = (state, value) => {\n    this.setState({[state]: value})\n  }\n\n  render() {\n    return (\n      <div>\n      <Title>Employee List</Title>\n      <FilterOptions\n      employees={this.state.employees}\n      setStateApp={this.setStateApp}\n      nonFilteredEmps={this.state.nonFilteredEmps}\n      />\n      <SortOptions\n      employees={this.state.employees}\n      setStateApp={this.setStateApp}\n      nonFilteredEmps={this.state.nonFilteredEmps}\n      />\n      <Wrapper>\n      {\n      this.state.employees.map(employee => (\n        <EmployeeCard \n          key={employee.id}\n          name={`${employee.name.first} ${employee.name.last}`}\n          image={employee.picture.large}\n          location={employee.location}\n          email={employee.email} \n          github={employee.login.username}\n          end={() => {\n            this.setState({toDel: true})\n            this.regenEmp(employee.id, this.state.employees, this.state.filteredBy)\n            } \n          }\n          toDel={this.state.delId === employee.id}\n        >\n        </EmployeeCard>\n    ))\n      }\n    </Wrapper>\n    </div>\n    )\n  };\n}\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
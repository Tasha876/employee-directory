{"version":3,"sources":["components/Skeletons/SkeletonElement/index.js","components/EmployeeCard/index.js","components/FilterOptions/index.js","components/SortOptions/index.js","components/Wrapper/index.js","components/Title/index.js","API.js","App.js","index.js"],"names":["SkeletonElement","type","classes","className","EmailLink","email","href","GitHubLink","props","github","getGreeting","name","id","list","charCodeAt","length","GetEmail","emailComponent","GetUserName","userNameComp","getCity","location","city","country","EmployeeCardMemo","loaded","alt","src","image","onClick","end","EmployeeCard","memo","prevProps","nextProps","FilterOptions","setEmployees","spec","value","setStateApp","nonFilteredEmps","filter","employee","filterByList","func","map","SortOptions","sortBy","compare","a","b","resolve","obj","split","reduce","prev","curr","sortEmployees","employees","sort","SortByList","desc","toLocaleLowerCase","Wrapper","children","Title","idGenerator","API","NUM_EMPLOYEES","getEmployee","axios","get","then","res","data","results","emp","getEmployees","n","this","regenEmployee","oldEmployeeId","employeeList","oldEmpIndex","findIndex","oldAllEmpIndex","newEmployee","gender","splice","filtered","nonFiltered","App","state","setState","delId","filteredBy","first","last","picture","large","login","username","regenEmp","Array","_","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd707138.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\n\nconst SkeletonElement = ({type}) => {\n\n    const classes = `skeleton ${type}`\n    return (\n        <div className={classes}/>\n    )\n}\n\nexport default SkeletonElement\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport { memo } from \"react\";\nimport \"./style.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport SkeletonElement from \"../Skeletons/SkeletonElement\";\n\nfunction EmailLink({email}) {\n\n  return (\n    <a href={\"mailto:\" + email}>{email}</a>\n  )\n}\n\nfunction GitHubLink(props) {\n\n  const { github } = props\n  \n  return (\n    <a href={\"http://github.com/\" + github}>{github}</a>\n  )\n}\n\nconst getGreeting = (props) => {\n\n  const { name, id } = props\n\n  let list = [\n    `Hi, I'm ${name}. Goodday!`,\n    `Hey, my name is ${name}.`,\n    `How are you? I'm ${name}.`,\n    `I'm ${name}. Pleased to meet you!`\n  ]\n\n  return list[(id + name.charCodeAt(0)) % list.length] \n  // this is so the greeting looks random but it isn't (shhh...), just so the greeating stays the same between renders\n}\n\nconst GetEmail = (props) => {\n\n  const emailComponent = <EmailLink email = {props.email}/>\n\n  let list = [\n    <>Contact me at {emailComponent}</>,\n    <>My email address is {emailComponent}</>,\n    <>Reach me at {emailComponent}</>,\n    <>You can get in touch with me at {emailComponent}</>,\n    <>Get a hold of me at {emailComponent}</>\n  ]\n\n  return list[(props.id + props.email.charCodeAt(0)) % list.length]\n}\n\nconst GetUserName = (props) => {\n  const userNameComp = <GitHubLink github = {props.github}/>\n\n  let list = [\n    <>This is my github, {userNameComp}.</>,\n    <>My github is {userNameComp}.</>,\n    <>Look at my github, its {userNameComp}.</>,\n    <>See all my cool repos on github, I'm {userNameComp}.</>\n  ]\n\n  return list[(props.id + props.github.charCodeAt(0)) % list.length]\n}\n\nconst getCity = (props) => {\n\n  const { location, id } = props\n\n  let list = [\n    `I'm from ${location.city}, ${location.country}.`,\n    `I'm located in ${location.city}, ${location.country}.`,\n    `I'm from ${location.country}, more specifically ${location.city}.`,\n    `I live in ${location.city}, ${location.country}.`\n  ]\n\n  return list[(id + location.city.charCodeAt(0)) % list.length]\n}\n\nconst EmployeeCardMemo = (props) => {\n\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        {props.loaded ? <img className=\"img-thumbnail rounded-circle\" alt={props.name} src={props.image} /> : <SkeletonElement type={'image'}/>}\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            { props.loaded ? getGreeting(props) : <SkeletonElement type={'text'}/>}\n          </li>\n          <li>\n           { props.loaded ? getCity(props) : <SkeletonElement type={'text'}/>}\n          </li>\n          <li>\n            {props.loaded ? <GetUserName github = {props.github} id={props.id}/> : <SkeletonElement type={'text'}/>}\n          </li>\n          <li>\n            {props.loaded ? <GetEmail email={props.email} id={props.id}/> : <SkeletonElement type={'text'}/>}\n          </li>\n        </ul>\n      </div>\n      <span className=\"remove\" onClick={props.end}>&#x21bb;</span>\n    </div>\n  );\n}\n\n// so only the chosen employee regenerated on \"regenEmp\"\nconst EmployeeCard = memo(EmployeeCardMemo,(prevProps, nextProps) => {\n  return prevProps.id === nextProps.id\n})\n\nexport default EmployeeCard;\n","import React from \"react\";\nimport App from \"../../App\"\nimport \"./style.css\"\n\nconst FilterOptions = (props) => {\n\n\n// this sets the employee list to the filtered list\nconst setEmployees = (spec,value) => {\n    props.setStateApp(\"employees\", props.nonFilteredEmps.filter(\n        employee => employee[spec] === value\n      ))\n    props.setStateApp(\"filteredBy\", value)\n}\n\n// this sets the employee list back to the non-filtered list\nconst resetEmployees = () => {\n    props.setStateApp(\"employees\", props.nonFilteredEmps)\n    props.setStateApp(\"filteredBy\", \"none\")\n\n}\n\n// list containing options for filter and their corresponding funcitons\nconst filterByList = [\n        {\n            value: \"Show only women\", func: () => {\n              setEmployees(\"gender\",\"female\")\n            }\n        },\n        {\n            value: \"Show only men\", func: () => {\n\n              setEmployees(\"gender\",\"male\")\n            }\n        },\n        {\n            value: \"Show both\", func: () => {\n              resetEmployees()\n            }\n        },\n      ]\n    \n  return (\n    <>\n    <div className=\"options\">\n      <div className={'btn-group'}>\n        {filterByList.map(filter => (\n                <button className={'btn btn-outline-primary'} key={filter.value} name=\"sortBy\" onClick={filter.func}>{filter.value}</button>\n            )\n        )}\n      </div>\n    </div>\n    </>);\n}\n\nexport default FilterOptions;\n","import React from \"react\";\nimport App from \"../../App\"\n\nconst SortOptions = (props) => {\n\n  // this has to be global b/c compare can only take two arguments\n  let sortBy = \"\"\n\n  const compare = (a,b) => {\n    a = resolve(sortBy,a)\n    b = resolve(sortBy,b)\n    if (a < b) return -1\n    else if (a > b) return 1\n    return 0\n  }\n\n  // thanks to Stack Overflow!\n  // resolves strings such as \"a.b.c\" to object properties\n  // ex1. resolve(\"a.b.c.d\",{a: {b: {c: {d : \"hello\"}}}}) => \"hello\"\n  // ex2. resolve(\"a.b.c\",{a: {b: {c: {d : \"hello\"}}}}) => \"{d: hello}\"\n  const resolve = (props, obj) => {\n    return props.split('.').reduce((prev, curr) => prev ? prev[curr] : null, obj)\n  }\n\n  const sortEmployees = () => {\n    props.setStateApp(\"employees\", props.employees.sort(compare))\n  }\n\n  const SortByList = [\n        // value will be the value or sortBy\n          {\n              desc: \"First name\", value: \"name.first\", func: () => {\n                sortEmployees()\n              }\n          },\n          {\n              desc: \"Last name\", value: \"name.last\", func: () => {\n                sortEmployees()\n              }\n          },\n          {\n            desc: \"City\", value: \"location.city\", func: () => {\n                sortEmployees()\n              }\n          },\n        ]\n    \n  return (\n    <>\n    <div className=\"options\">\n      <div className={'btn-group'}>\n      {SortByList.map(sort => (\n              <button className={'btn btn-outline-primary'} key={sort.desc} name=\"sortBy\" onClick={()=>{sortBy=sort.value; sort.func()}}>Sort by {sort.desc.toLocaleLowerCase()}</button>\n          )\n      )}\n      </div>\n    </div>\n    </>);\n}\n\nexport default SortOptions;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title text-secondary\">{props.children}</h1>;\n}\n\nexport default Title;\n","import axios from \"axios\"\n\nlet idGenerator = 0;\n\n// const numEmployees = 10,\n\nconst API = {\n\n    NUM_EMPLOYEES: 10,\n\n    getEmployee() {\n        return axios.get('https://randomuser.me/api/')\n            .then(res => {\n            return res.data.results[0]\n            }).then(emp => {\n                emp.id = ++idGenerator\n                return emp\n            })\n    },\n\n    getEmployees(n = this.NUM_EMPLOYEES) {\n        return axios.get(\"https://randomuser.me/api/?results=\" + n)\n        .then(res => res.data.results\n        .map(employee => {\n            employee.id = ++idGenerator\n            return employee\n        })\n        )\n        .then(employees => employees)\n    },\n\n    regenEmployee(oldEmployeeId, employeeList, filter, nonFilteredEmps) {\n        let oldEmpIndex = employeeList.findIndex(employee =>\n            employee.id === oldEmployeeId \n        )\n        let oldAllEmpIndex = nonFilteredEmps.findIndex(employee =>\n            employee.id === oldEmployeeId \n        )\n        return this.getEmployee()\n        .then(\n            newEmployee => {\n                if (filter === \"none\" || newEmployee.gender === filter) {\n                    employeeList.splice(oldEmpIndex,1,newEmployee)\n                    nonFilteredEmps.splice(oldAllEmpIndex,1,newEmployee)\n                    return {filtered: employeeList, nonFiltered: nonFilteredEmps}\n                } else {\n                    return this.regenEmployee(oldEmployeeId, employeeList,filter, nonFilteredEmps)\n                }\n        })\n    }\n\n}\n\nexport default API","import React, { createRef } from 'react';\nimport EmployeeCard from './components/EmployeeCard';\nimport FilterOptions from './components/FilterOptions';\nimport SortOptions from \"./components/SortOptions\"\nimport Wrapper from './components/Wrapper';\nimport Title from './components/Title';\nimport API from './API';\nimport { render } from 'react-dom';\n\nclass App extends React.Component {\n\n  constructor(){\n    super()\n    this.state = {\n      loaded: false,\n      employees: [],\n      nonFilteredEmps: [],\n      delId: 0,\n      filteredBy: \"none\"\n    };\n  }\n\n  componentDidMount() {\n    API.getEmployees()\n      .then(employeeList => {\n        this.setState({ employees: employeeList, nonFilteredEmps: employeeList})\n      })\n      .then(() => {\n        this.setState({ loaded: true })\n      })\n  };\n\n  regenEmp(id, employees, filter = \"none\", nonFilteredEmps = this.state.nonFilteredEmps) {\n    API.regenEmployee(id, employees, filter, nonFilteredEmps)\n      .then(employeeList => {\n        this.setState({ employees: employeeList.filtered, nonFilteredEmps: employeeList.nonFiltered})\n    });\n  }\n\n  setStateApp = (state, value) => {\n    this.setState({[state]: value})\n  }\n\n  render() {\n    return (\n      <div>\n      <Title>Employee List</Title>\n      <FilterOptions\n        employees={this.state.employees}\n        setStateApp={this.setStateApp}\n        nonFilteredEmps={this.state.nonFilteredEmps}\n      />\n      <SortOptions\n        employees={this.state.employees}\n        setStateApp={this.setStateApp}\n        nonFilteredEmps={this.state.nonFilteredEmps}\n      />\n      <Wrapper>\n      {\n      this.state.loaded? (\n        this.state.employees.map(employee => (\n        <EmployeeCard \n          key={employee.id}\n          id={employee.id}\n          loaded={this.state.loaded}\n          name={`${employee.name.first} ${employee.name.last}`}\n          image={employee.picture.large || ''}\n          location={employee.location}\n          email={employee.email} \n          github={employee.login.username}\n          end={() => {\n            this.regenEmp(employee.id, this.state.employees, this.state.filteredBy)\n            } \n          }\n        >\n        </EmployeeCard>\n    ))): [...Array(API.NUM_EMPLOYEES)].map(_=><EmployeeCard loaded={this.state.loaded}/>)}\n    </Wrapper>\n    </div>\n    )\n  };\n}\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}